// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package command

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RemoteConnection struct {
	// The address of the resource to connect to.
	Host string `pulumi:"host"`
	// The password we should use for the connection.
	Password *string `pulumi:"password"`
	// The port to connect to. Defaults to 22.
	Port *float64 `pulumi:"port"`
	// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
	PrivateKey *string `pulumi:"privateKey"`
	User       *string `pulumi:"user"`
}

// RemoteConnectionInput is an input type that accepts RemoteConnectionArgs and RemoteConnectionOutput values.
// You can construct a concrete instance of `RemoteConnectionInput` via:
//
//          RemoteConnectionArgs{...}
type RemoteConnectionInput interface {
	pulumi.Input

	ToRemoteConnectionOutput() RemoteConnectionOutput
	ToRemoteConnectionOutputWithContext(context.Context) RemoteConnectionOutput
}

type RemoteConnectionArgs struct {
	// The address of the resource to connect to.
	Host pulumi.StringInput `pulumi:"host"`
	// The password we should use for the connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to connect to. Defaults to 22.
	Port pulumi.Float64PtrInput `pulumi:"port"`
	// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	User       pulumi.StringPtrInput `pulumi:"user"`
}

func (RemoteConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteConnection)(nil)).Elem()
}

func (i RemoteConnectionArgs) ToRemoteConnectionOutput() RemoteConnectionOutput {
	return i.ToRemoteConnectionOutputWithContext(context.Background())
}

func (i RemoteConnectionArgs) ToRemoteConnectionOutputWithContext(ctx context.Context) RemoteConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteConnectionOutput)
}

func (i RemoteConnectionArgs) ToRemoteConnectionPtrOutput() RemoteConnectionPtrOutput {
	return i.ToRemoteConnectionPtrOutputWithContext(context.Background())
}

func (i RemoteConnectionArgs) ToRemoteConnectionPtrOutputWithContext(ctx context.Context) RemoteConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteConnectionOutput).ToRemoteConnectionPtrOutputWithContext(ctx)
}

// RemoteConnectionPtrInput is an input type that accepts RemoteConnectionArgs, RemoteConnectionPtr and RemoteConnectionPtrOutput values.
// You can construct a concrete instance of `RemoteConnectionPtrInput` via:
//
//          RemoteConnectionArgs{...}
//
//  or:
//
//          nil
type RemoteConnectionPtrInput interface {
	pulumi.Input

	ToRemoteConnectionPtrOutput() RemoteConnectionPtrOutput
	ToRemoteConnectionPtrOutputWithContext(context.Context) RemoteConnectionPtrOutput
}

type remoteConnectionPtrType RemoteConnectionArgs

func RemoteConnectionPtr(v *RemoteConnectionArgs) RemoteConnectionPtrInput {
	return (*remoteConnectionPtrType)(v)
}

func (*remoteConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteConnection)(nil)).Elem()
}

func (i *remoteConnectionPtrType) ToRemoteConnectionPtrOutput() RemoteConnectionPtrOutput {
	return i.ToRemoteConnectionPtrOutputWithContext(context.Background())
}

func (i *remoteConnectionPtrType) ToRemoteConnectionPtrOutputWithContext(ctx context.Context) RemoteConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteConnectionPtrOutput)
}

type RemoteConnectionOutput struct{ *pulumi.OutputState }

func (RemoteConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteConnection)(nil)).Elem()
}

func (o RemoteConnectionOutput) ToRemoteConnectionOutput() RemoteConnectionOutput {
	return o
}

func (o RemoteConnectionOutput) ToRemoteConnectionOutputWithContext(ctx context.Context) RemoteConnectionOutput {
	return o
}

func (o RemoteConnectionOutput) ToRemoteConnectionPtrOutput() RemoteConnectionPtrOutput {
	return o.ToRemoteConnectionPtrOutputWithContext(context.Background())
}

func (o RemoteConnectionOutput) ToRemoteConnectionPtrOutputWithContext(ctx context.Context) RemoteConnectionPtrOutput {
	return o.ApplyT(func(v RemoteConnection) *RemoteConnection {
		return &v
	}).(RemoteConnectionPtrOutput)
}

// The address of the resource to connect to.
func (o RemoteConnectionOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteConnection) string { return v.Host }).(pulumi.StringOutput)
}

// The password we should use for the connection.
func (o RemoteConnectionOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteConnection) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to connect to. Defaults to 22.
func (o RemoteConnectionOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RemoteConnection) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
func (o RemoteConnectionOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteConnection) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o RemoteConnectionOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteConnection) *string { return v.User }).(pulumi.StringPtrOutput)
}

type RemoteConnectionPtrOutput struct{ *pulumi.OutputState }

func (RemoteConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteConnection)(nil)).Elem()
}

func (o RemoteConnectionPtrOutput) ToRemoteConnectionPtrOutput() RemoteConnectionPtrOutput {
	return o
}

func (o RemoteConnectionPtrOutput) ToRemoteConnectionPtrOutputWithContext(ctx context.Context) RemoteConnectionPtrOutput {
	return o
}

func (o RemoteConnectionPtrOutput) Elem() RemoteConnectionOutput {
	return o.ApplyT(func(v *RemoteConnection) RemoteConnection { return *v }).(RemoteConnectionOutput)
}

// The address of the resource to connect to.
func (o RemoteConnectionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The password we should use for the connection.
func (o RemoteConnectionPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteConnection) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to connect to. Defaults to 22.
func (o RemoteConnectionPtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RemoteConnection) *float64 {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.Float64PtrOutput)
}

// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
func (o RemoteConnectionPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteConnection) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

func (o RemoteConnectionPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteConnection) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(RemoteConnectionOutput{})
	pulumi.RegisterOutputType(RemoteConnectionPtrOutput{})
}
